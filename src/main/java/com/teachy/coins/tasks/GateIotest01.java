package com.teachy.coins.tasks;import com.teachy.coins.gateapi.ApiClient;import com.teachy.coins.gateapi.Configuration;import com.teachy.coins.gateapi.api.SpotApi;import com.teachy.coins.gateapi.models.Order;import com.teachy.coins.gateapi.models.SpotAccount;import com.teachy.coins.gateapi.models.Ticker;import lombok.extern.slf4j.Slf4j;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * @ClassName ZBtest01 * @Description Bibox * @Author gang.tu * @Date 2020/10/19 15:48 *///@Component@Slf4jpublic class GateIotest01 {    static final String API_KEY = "";    static final String SECRET_KEY = "";    List<String> list = Collections.synchronizedList(new ArrayList<>());    ApiClient defaultClient = Configuration.getDefaultApiClient();    private final String TICKER_NAME = "ETH_USDT";    private double MAX_PRICE = 0;    private static volatile double firstSell = 0;    private static volatile double firstBuy = 0;    private static double usdt = 0;    DecimalFormat df = new DecimalFormat("#.0000");    SpotApi apiInstance;    @Scheduled(cron = "*/1 * * * * ?")    public void doTask1() {        try {            defaultClient.setApiKeySecret(API_KEY, SECRET_KEY);            defaultClient.setBasePath("https://api.gateio.ws/api/v4");            apiInstance = new SpotApi(defaultClient);            task();        } catch (Exception e) {            log.info("获取数据出错:{}", e.getMessage(), e);        }    }    public void task() {        new Thread(new FirstSell()).start();        new Thread(new AvailableUSDT()).start();        while (true) {            try {                if (firstSell == 0 || firstBuy == 0 || usdt == 0) {                    Thread.sleep(100);                    continue;                }                if (usdt < 10) {                    log.info("usdt<20.....");                    Thread.sleep(100);                    continue;                }                if (firstBuy > MAX_PRICE) {                    log.info("buy:{}  price is too high.....", firstBuy);                    Thread.sleep(100);                    continue;                }                buy();            } catch (Exception e) {            }        }    }    public void buy() throws Exception {        double price = firstBuy;        price=300d;        double u = usdt;        String amount = df.format((u - 2) / price);        if (price > MAX_PRICE) {            return;        }        Order order = new Order(); // Order        order.setSide(Order.SideEnum.BUY);        order.setAmount(amount);        order.setPrice(price + "");        order.setCurrencyPair(TICKER_NAME);        order.setTimeInForce(Order.TimeInForceEnum.IOC);        apiInstance.createOrder(order);    }    class FirstSell implements Runnable {        @Override        public void run() {            while (true) {                try {                    Thread.sleep(100);                    List<Ticker> result = apiInstance.listTickers()                            .currencyPair(TICKER_NAME)                            .execute();                    firstSell = Double.valueOf(result.get(0).getLowestAsk());                    MAX_PRICE = Double.valueOf(result.get(0).getLow24h()) * 2;                    firstBuy = Double.parseDouble(df.format(firstSell * (1 + 0.05)));                } catch (Exception e) {                }            }        }    }    class AvailableUSDT implements Runnable {        @Override        public void run() {            while (true) {                try {                    Thread.sleep(100);                    List<SpotAccount> result = apiInstance.listSpotAccounts()                            .currency("usdt")                            .execute();                    usdt = Double.parseDouble(result.get(0).getAvailable());                } catch (Exception e) {                }            }        }    }}