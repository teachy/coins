package com.teachy.coins.tasks;import cn.hutool.core.convert.Convert;import cn.hutool.crypto.SecureUtil;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.teachy.coins.bibixcom.enums.OrderSideEnum;import com.teachy.coins.zb.HttpUtilManager;import lombok.extern.slf4j.Slf4j;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;/** * @ClassName ZBtest01 * @Description ZT * @Author gang.tu * @Date 2020/10/19 15:48 *///@Component@Slf4jpublic class ZTtest01 {    private static final String API_KEY = "";    private static final String SECRET_KEY = "";    List<String> list = Collections.synchronizedList(new ArrayList<>());    private final String URL_TICKER = "/open/api/get_ticker";    private final String TICKER_NAME = "STCS_USDT";    private double MAX_PRICE = 0.031;    private static volatile double firstSell = 0;    private static volatile double firstBuy = 0;    private static double usdt = 0;    DecimalFormat df = new DecimalFormat("#.00000");    @Scheduled(cron = "*/1 * * * * ?")    public void doTask1() {        try {            task();        } catch (Exception e) {            log.info("获取数据出错:{}", e.getMessage(), e);        }    }    public void task() {        new Thread(new FirstSell()).start();        new Thread(new AvailableUSDT()).start();        while (true) {            try {                if (firstSell == 0 || firstBuy == 0 || usdt == 0) {                    Thread.sleep(500);                    continue;                }                cancelTrade();                if (usdt < 20) {                    log.info("usdt<20.....");                    Thread.sleep(200);                    continue;                }                if (firstBuy > MAX_PRICE) {                    log.info("buy:{}  price is too high.....", firstBuy);                    Thread.sleep(300);                    continue;                }                buy();            } catch (Exception e) {            }        }    }    public void buy() throws Exception {        double price = firstBuy;//多线程问题        double u = usdt;        String amount = df.format((u - 2) / price);        String orderUrl = "https://www.ztb.im/api/v1/private/trade/limit";        if (price > MAX_PRICE) {            return;        }        String signStr = "amount=" + amount + "&api_key=" + API_KEY + "&market=" + TICKER_NAME + "&price=" + price + "&side=2&secret_key=" + SECRET_KEY;        String sign = getSign(signStr);        Map<String, String> map = new HashMap<>();        map.put("api_key", API_KEY);        map.put("price", price + "");        map.put("side", "2");        map.put("market", TICKER_NAME);        map.put("amount", amount);        map.put("sign", sign.toUpperCase());        JSONObject jsonObject = JSONObject.parseObject(HttpUtilManager.getInstance().requestHttpPost(orderUrl, map));        String aLong = jsonObject.getJSONObject("result").getString("id");        list.add(aLong);    }    public void cancelTrade() throws Exception {        Iterator<String> iterator = list.iterator();        String orderUrl = "https://www.ztb.im/api/v1/private/trade/cancel";        while (iterator.hasNext()) {            String s = iterator.next();            String signStr = "api_key=" + API_KEY + "&market=" + TICKER_NAME + "&order_id=" + s + "&secret_key=" + SECRET_KEY;            String sign = getSign(signStr);            Map<String, String> map = new HashMap<>();            map.put("api_key", API_KEY);            map.put("market", TICKER_NAME);            map.put("order_id", s);            map.put("sign", sign.toUpperCase());            JSONObject jsonObject = JSONObject.parseObject(HttpUtilManager.getInstance().requestHttpPost(orderUrl, map));            String message = jsonObject.getString("message");            if ("操作成功".equals(message)) {                list.remove(s);            }        }    }    class FirstSell implements Runnable {        @Override        public void run() {            Map<String, String> params = new HashMap<>();            while (true) {                try {                    Thread.sleep(200);                    JSONObject jsonObject = JSONObject.parseObject(HttpUtilManager.getInstance().requestHttpGet("https://www.ztb.im/api/v1/tickers", params));                    JSONArray tickers = jsonObject.getJSONArray("ticker");                    for (int i = 0; i < tickers.size(); i++) {                        jsonObject = tickers.getJSONObject(i);                        if (TICKER_NAME.equalsIgnoreCase(jsonObject.getString("symbol"))) {                            firstSell = jsonObject.getDouble("sell");//                            MAX_PRICE = jsonObject.getDouble("low") * 2;                            break;                        }                    }                    firstBuy = Double.parseDouble(df.format(firstSell * (1 + 0.05)));                } catch (Exception e) {                }            }        }    }    class AvailableUSDT implements Runnable {        @Override        public void run() {            Map<String, String> params = new HashMap<>();            while (true) {                try {                    Thread.sleep(200);                    String userUrl = "https://www.ztb.im/api/v1/private/user";                    String signStr = "api_key=" + API_KEY + "&secret_key=" + SECRET_KEY;                    String sign = getSign(signStr);                    params.put("api_key", API_KEY);                    params.put("sign", sign.toUpperCase());                    JSONObject jsonObject = JSONObject.parseObject(HttpUtilManager.getInstance().requestHttpPost(userUrl, params));                    usdt = jsonObject.getJSONObject("result").getJSONObject("USDT").getDouble("available");                } catch (Exception e) {                }            }        }    }    public String getSign(String name) {        return SecureUtil.md5(name);    }}