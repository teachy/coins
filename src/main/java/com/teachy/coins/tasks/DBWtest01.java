package com.teachy.coins.tasks;import cn.hutool.core.convert.Convert;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.teachy.coins.zb.EncryDigestUtil;import com.teachy.coins.zb.HttpUtilManager;import lombok.extern.slf4j.Slf4j;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import javax.validation.constraints.Null;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.text.DecimalFormat;import java.util.Collections;import java.util.HashMap;import java.util.Map;import static com.teachy.coins.zb.MapSort.sortMapByKey;import static com.teachy.coins.zb.MapSort.toStringMap;/** * @ClassName ZBtest01 * @Description Dcoin * @Author gang.tu * @Date 2020/10/19 15:48 *///@Component@Slf4jpublic class DBWtest01 {    private static final String API_KEY = "";    private static final String SECRET_KEY = "";    private final String URL_TICKER = "/get_ticker";    private final String TICKER_NAME = "ethusdt";    private final Integer MAX_PRICE = 15;    private static volatile double firstSell = 0;    private static volatile double firstBuy = 0;    private static double usdt = 0;    DecimalFormat df = new DecimalFormat("#.00");    @Scheduled(cron = "*/1 * * * * ?")    public void doTask1() {        try {            task();        } catch (Exception e) {            log.info("获取数据出错:{}", e.getMessage(), e);        }    }    public void task() {//        new Thread(new FirstSell()).run();        new Thread(new AvailableUSDT()).run();        while (true) {            try {                if (firstSell == 0 || firstBuy == 0 || usdt == 0) {                    Thread.sleep(100);                    continue;                }                if (usdt < 20) {                    log.info("usdt<20.....");                    continue;                }                if (firstBuy > MAX_PRICE) {                    log.info("buy:{}  price is too high.....", firstBuy);                    firstBuy = 15;                }                new Thread(new Runnable() {                    @Override                    public void run() {                        try {                            buy();                        } catch (Exception e) {                        }                    }                }).start();                Thread.sleep(50);            } catch (Exception e) {            }        }    }    public void buy() throws Exception {        Map<String, String> params = new HashMap<>();        double price = firstBuy;//多线程问题        double u = usdt;        String amount = df.format((u - 2) / price);        String orderUrl = "https://trade.zb.live/api/order";        params.put("method", "order");        params.put("accesskey", API_KEY);        params.put("acctType", "0");        params.put("amount", amount);        params.put("currency", TICKER_NAME);        params.put("orderType", "2");        if (price > MAX_PRICE) {            return;        }//        params.put("price", price + "");//        params.put("tradeType", "1");//        params.put("sign", getSign(params));//        params.put("reqTime", Convert.toStr(System.currentTimeMillis()));//        orderUrl = orderUrl + "?" + buildMap(sortMapByKey(params));//        System.out.println(HttpUtilManager.getInstance().requestHttpGet(orderUrl, Collections.EMPTY_MAP));    }    class FirstSell implements Runnable {        @Override        public void run() {            Map<String, String> params = new HashMap<>();            params.put("symbol", TICKER_NAME);            while (true) {                try {                    Thread.sleep(50);                    JSONObject jsonObject = JSONObject.parseObject(HttpUtilManager.getInstance().requestHttpGet("https://openapi.dcoinpro.com/open/api" + URL_TICKER, params));                    firstSell = jsonObject.getJSONObject("data").getJSONArray("sell").getDoubleValue(0);                    firstBuy = Double.parseDouble(df.format(firstSell * (1 + 0.1)));                } catch (Exception e) {                }            }        }    }    class AvailableUSDT implements Runnable {        @Override        public void run() {            Map<String, String> params = new HashMap<>();            while (true) {                try {                    Thread.sleep(50);                    params.clear();                    String userUrl = "https://openapi.dcoinpro.com/open/api/user/account";                    params.put("api_key", API_KEY);                    params.put("sign", getSign("country86mobile17341307563passwordtu19891113time"+Convert.toStr(System.currentTimeMillis()).substring(0,10)+SECRET_KEY));                    JSONObject jsonObject = JSONObject.parseObject(HttpUtilManager.getInstance().requestHttpGet(userUrl, params));                    JSONArray jsonArray = jsonObject.getJSONObject("result").getJSONArray("coins");                    for (int i = 0; i < jsonArray.size(); i++) {                        JSONObject object = jsonArray.getJSONObject(i);                        if ("USDT".equals(object.getString("enName"))) {                            usdt = Double.parseDouble(df.format(object.getDouble("available")));                        }                    }                } catch (Exception e) {                }            }        }    }    public String getSign(String rawStr) {        return DigestUtils.md5Hex(null == rawStr ? StringUtils.EMPTY : rawStr);    }    public String buildMap(Map<String, String> map) {        StringBuffer sb = new StringBuffer();        if (map.size() > 0) {            for (String key : map.keySet()) {                sb.append(key + "=");                if (StringUtils.isEmpty(map.get(key))) {                    sb.append("&");                } else {                    String value = map.get(key);                    try {                        value = URLEncoder.encode(value, "UTF-8");                    } catch (UnsupportedEncodingException e) {                        e.printStackTrace();                    }                    sb.append(value + "&");                }            }        }        return sb.toString();    }}