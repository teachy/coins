package com.teachy.coins.tasks;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.teachy.coins.bibixcom.BiBoxClient;import com.teachy.coins.bibixcom.BiBoxHttpClient;import com.teachy.coins.bibixcom.BiBoxHttpClientConfig;import com.teachy.coins.bibixcom.enums.OrderSideEnum;import com.teachy.coins.bz.exchange.restapi.ApiRestClient;import lombok.extern.slf4j.Slf4j;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Iterator;import java.util.List;/** * @ClassName ZBtest01 * @Description BitZ * @Author gang.tu * @Date 2020/10/19 15:48 *///@Component@Slf4jpublic class BZtest01 {    private static final String API_KEY = "";    private static final String SECRET_KEY = "";    private static final String apiServer = "https://api.bitzspeed.com";    private static final String tradePwd = "tuu19891113.."; // 委托单 必须 传递 tradePwd 交易密码    ApiRestClient restClient = new ApiRestClient(apiServer, API_KEY, SECRET_KEY, tradePwd);    List<String> list = Collections.synchronizedList(new ArrayList<>());    private final String TICKER_NAME = "mte_usdt";    private double MAX_PRICE = 27;    private static volatile double firstSell = 0;    private static volatile double firstBuy = 0;    private static double usdt = 0;    DecimalFormat df = new DecimalFormat("#.0000");    @Scheduled(cron = "*/1 * * * * ?")    public void doTask1() {        try {            task();        } catch (Exception e) {            log.info("获取数据出错:{}", e.getMessage(), e);        }    }    public void task() {        new Thread(new FirstSell()).start();        new Thread(new AvailableUSDT()).start();        new Thread(new AvailableUSDT1()).start();        while (true) {            try {                cancelTrade();                if (firstSell == 0 || firstBuy == 0 || usdt == 0) {                    Thread.sleep(100);                    continue;                }                if (usdt < 10) {                    log.info("usdt<20.....");                    continue;                }                if (firstBuy > MAX_PRICE) {                    log.info("buy:{}  price is too high.....", firstBuy);                    continue;                }                buy();                Thread.sleep(200);            } catch (Exception e) {            }        }    }    public void buy() throws Exception {        double price = firstBuy;        double u = usdt;        String amount = df.format((u - 2) / price);        if (price > MAX_PRICE) {            return;        }        JSONObject jsonObject = JSONObject.parseObject(restClient.addEntrustSheet(TICKER_NAME, amount, price + "", "1"));        String aLong = jsonObject.getJSONObject("data").getString("id");        list.add(aLong);    }    public void cancelTrade() throws Exception {        Iterator<String> iterator = list.iterator();        while (iterator.hasNext()) {            String s = iterator.next();            JSONObject jsonObject = JSONObject.parseObject(restClient.cancelEntrustSheet(s));            int aLong = jsonObject.getInteger("status");            if (aLong == 200) {                list.remove(s);            }        }    }    class FirstSell implements Runnable {        @Override        public void run() {            while (true) {                try {                    Thread.sleep(100);                    JSONObject jsonObject = JSONObject.parseObject(restClient.ticker(TICKER_NAME));                    firstSell = jsonObject.getJSONObject("data").getDoubleValue("askPrice");                    firstBuy = Double.parseDouble(df.format(firstSell * (1 + 0.1)));                } catch (Exception e) {                }            }        }    }    class AvailableUSDT1 implements Runnable {        @Override        public void run() {            while (true) {                try {                    Thread.sleep(100);                    JSONObject jsonObject = JSONObject.parseObject(restClient.getUserAssets());                    JSONArray jsonArray = jsonObject.getJSONObject("data").getJSONArray("info");                    for (int i = 0; i < jsonArray.size(); i++) {                        JSONObject object = jsonArray.getJSONObject(i);                        if ("usdt".equals(object.getString("name"))) {                            usdt = Double.parseDouble(df.format(object.getDouble("over")));                            break;                        }                    }                } catch (Exception e) {                }            }        }    }    class AvailableUSDT implements Runnable {        @Override        public void run() {            while (true) {                try {                    Thread.sleep(100);                    JSONObject jsonObject = JSONObject.parseObject(restClient.getUserAssets());                    JSONArray jsonArray = jsonObject.getJSONObject("data").getJSONArray("info");                    for (int i = 0; i < jsonArray.size(); i++) {                        JSONObject object = jsonArray.getJSONObject(i);                        if ("usdt".equals(object.getString("name"))) {                            usdt = Double.parseDouble(df.format(object.getDouble("over")));                            break;                        }                    }                } catch (Exception e) {                }            }        }    }}